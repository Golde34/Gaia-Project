/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: auth/v1/auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace auth.v1 {
    export class CheckJwtRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            access_token?: string;
        }): CheckJwtRequest {
            const message = new CheckJwtRequest({});
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: string;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_token.length)
                writer.writeString(1, this.access_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckJwtRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckJwtRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckJwtRequest {
            return CheckJwtRequest.deserialize(bytes);
        }
    }
    export class CheckJwtResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4]];
        constructor(data?: any[] | ({} & (({
            message?: string;
        }) | ({
            account_id?: number;
        }) | ({
            username?: string;
        }) | ({
            access_token?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_account_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_username() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_access_token() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _message() {
            const cases: {
                [index: number]: "none" | "message";
            } = {
                0: "none",
                1: "message"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _account_id() {
            const cases: {
                [index: number]: "none" | "account_id";
            } = {
                0: "none",
                2: "account_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _username() {
            const cases: {
                [index: number]: "none" | "username";
            } = {
                0: "none",
                3: "username"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _access_token() {
            const cases: {
                [index: number]: "none" | "access_token";
            } = {
                0: "none",
                4: "access_token"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            message?: string;
            account_id?: number;
            username?: string;
            access_token?: string;
        }): CheckJwtResponse {
            const message = new CheckJwtResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                account_id?: number;
                username?: string;
                access_token?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_message)
                writer.writeString(1, this.message);
            if (this.has_account_id)
                writer.writeInt64(2, this.account_id);
            if (this.has_username)
                writer.writeString(3, this.username);
            if (this.has_access_token)
                writer.writeString(4, this.access_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckJwtResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckJwtResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.account_id = reader.readInt64();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        message.access_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckJwtResponse {
            return CheckJwtResponse.deserialize(bytes);
        }
    }
    export class CheckAccountPrivilegeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            privilege?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("privilege" in data && data.privilege != undefined) {
                    this.privilege = data.privilege;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get privilege() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set privilege(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account_id?: number;
            privilege?: string;
        }): CheckAccountPrivilegeRequest {
            const message = new CheckAccountPrivilegeRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.privilege != null) {
                message.privilege = data.privilege;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                privilege?: string;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.privilege != null) {
                data.privilege = this.privilege;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeInt64(1, this.account_id);
            if (this.privilege.length)
                writer.writeString(2, this.privilege);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckAccountPrivilegeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckAccountPrivilegeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readInt64();
                        break;
                    case 2:
                        message.privilege = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckAccountPrivilegeRequest {
            return CheckAccountPrivilegeRequest.deserialize(bytes);
        }
    }
    export class CheckAccountPrivilegeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            has_privilege?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("has_privilege" in data && data.has_privilege != undefined) {
                    this.has_privilege = data.has_privilege;
                }
            }
        }
        get has_privilege() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set has_privilege(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            has_privilege?: boolean;
        }): CheckAccountPrivilegeResponse {
            const message = new CheckAccountPrivilegeResponse({});
            if (data.has_privilege != null) {
                message.has_privilege = data.has_privilege;
            }
            return message;
        }
        toObject() {
            const data: {
                has_privilege?: boolean;
            } = {};
            if (this.has_privilege != null) {
                data.has_privilege = this.has_privilege;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_privilege != false)
                writer.writeBool(1, this.has_privilege);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckAccountPrivilegeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckAccountPrivilegeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.has_privilege = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckAccountPrivilegeResponse {
            return CheckAccountPrivilegeResponse.deserialize(bytes);
        }
    }
    export class ViewAccountInformationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            account_id?: number;
        }): ViewAccountInformationRequest {
            const message = new ViewAccountInformationRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeInt64(1, this.account_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewAccountInformationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewAccountInformationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewAccountInformationRequest {
            return ViewAccountInformationRequest.deserialize(bytes);
        }
    }
    export class ViewAccountInformationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6]];
        constructor(data?: any[] | ({} & (({
            message?: string;
        }) | ({
            account_id?: number;
        }) | ({
            username?: string;
        }) | ({
            email?: string;
        }) | ({
            name?: string;
        }) | ({
            enabled?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_account_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_username() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
        }
        get has_enabled() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _message() {
            const cases: {
                [index: number]: "none" | "message";
            } = {
                0: "none",
                1: "message"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _account_id() {
            const cases: {
                [index: number]: "none" | "account_id";
            } = {
                0: "none",
                2: "account_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _username() {
            const cases: {
                [index: number]: "none" | "username";
            } = {
                0: "none",
                3: "username"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _email() {
            const cases: {
                [index: number]: "none" | "email";
            } = {
                0: "none",
                4: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                5: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _enabled() {
            const cases: {
                [index: number]: "none" | "enabled";
            } = {
                0: "none",
                6: "enabled"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            message?: string;
            account_id?: number;
            username?: string;
            email?: string;
            name?: string;
            enabled?: boolean;
        }): ViewAccountInformationResponse {
            const message = new ViewAccountInformationResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                account_id?: number;
                username?: string;
                email?: string;
                name?: string;
                enabled?: boolean;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_message)
                writer.writeString(1, this.message);
            if (this.has_account_id)
                writer.writeInt64(2, this.account_id);
            if (this.has_username)
                writer.writeString(3, this.username);
            if (this.has_email)
                writer.writeString(4, this.email);
            if (this.has_name)
                writer.writeString(5, this.name);
            if (this.has_enabled)
                writer.writeBool(6, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewAccountInformationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewAccountInformationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.account_id = reader.readInt64();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        message.name = reader.readString();
                        break;
                    case 6:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewAccountInformationResponse {
            return ViewAccountInformationResponse.deserialize(bytes);
        }
    }
    export class UpdateAccountInformationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            account_id?: number;
        } & (({
            username?: string;
        }) | ({
            email?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_username() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _username() {
            const cases: {
                [index: number]: "none" | "username";
            } = {
                0: "none",
                2: "username"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _email() {
            const cases: {
                [index: number]: "none" | "email";
            } = {
                0: "none",
                3: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            account_id?: number;
            username?: string;
            email?: string;
        }): UpdateAccountInformationRequest {
            const message = new UpdateAccountInformationRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                username?: string;
                email?: string;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeInt64(1, this.account_id);
            if (this.has_username)
                writer.writeString(2, this.username);
            if (this.has_email)
                writer.writeString(3, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountInformationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountInformationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readInt64();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountInformationRequest {
            return UpdateAccountInformationRequest.deserialize(bytes);
        }
    }
    export class UpdateAccountInformationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            message?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _message() {
            const cases: {
                [index: number]: "none" | "message";
            } = {
                0: "none",
                1: "message"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            message?: string;
        }): UpdateAccountInformationResponse {
            const message = new UpdateAccountInformationResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_message)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountInformationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountInformationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountInformationResponse {
            return UpdateAccountInformationResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            CheckJwt: {
                path: "/auth.v1.AuthService/CheckJwt",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckJwtRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckJwtRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckJwtResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckJwtResponse.deserialize(new Uint8Array(bytes))
            },
            CheckAccountPrivilege: {
                path: "/auth.v1.AuthService/CheckAccountPrivilege",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckAccountPrivilegeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckAccountPrivilegeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckAccountPrivilegeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckAccountPrivilegeResponse.deserialize(new Uint8Array(bytes))
            },
            ViewAccountInformation: {
                path: "/auth.v1.AuthService/ViewAccountInformation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ViewAccountInformationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ViewAccountInformationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ViewAccountInformationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ViewAccountInformationResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateAccountInformation: {
                path: "/auth.v1.AuthService/UpdateAccountInformation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateAccountInformationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateAccountInformationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateAccountInformationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateAccountInformationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CheckJwt(call: grpc_1.ServerUnaryCall<CheckJwtRequest, CheckJwtResponse>, callback: grpc_1.sendUnaryData<CheckJwtResponse>): void;
        abstract CheckAccountPrivilege(call: grpc_1.ServerUnaryCall<CheckAccountPrivilegeRequest, CheckAccountPrivilegeResponse>, callback: grpc_1.sendUnaryData<CheckAccountPrivilegeResponse>): void;
        abstract ViewAccountInformation(call: grpc_1.ServerUnaryCall<ViewAccountInformationRequest, ViewAccountInformationResponse>, callback: grpc_1.sendUnaryData<ViewAccountInformationResponse>): void;
        abstract UpdateAccountInformation(call: grpc_1.ServerUnaryCall<UpdateAccountInformationRequest, UpdateAccountInformationResponse>, callback: grpc_1.sendUnaryData<UpdateAccountInformationResponse>): void;
    }
    export class AuthServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthServiceService.definition, "AuthService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CheckJwt: GrpcUnaryServiceInterface<CheckJwtRequest, CheckJwtResponse> = (message: CheckJwtRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckJwtResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckJwtResponse>, callback?: grpc_1.requestCallback<CheckJwtResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckJwt(message, metadata, options, callback);
        };
        CheckAccountPrivilege: GrpcUnaryServiceInterface<CheckAccountPrivilegeRequest, CheckAccountPrivilegeResponse> = (message: CheckAccountPrivilegeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckAccountPrivilegeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckAccountPrivilegeResponse>, callback?: grpc_1.requestCallback<CheckAccountPrivilegeResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckAccountPrivilege(message, metadata, options, callback);
        };
        ViewAccountInformation: GrpcUnaryServiceInterface<ViewAccountInformationRequest, ViewAccountInformationResponse> = (message: ViewAccountInformationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ViewAccountInformationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ViewAccountInformationResponse>, callback?: grpc_1.requestCallback<ViewAccountInformationResponse>): grpc_1.ClientUnaryCall => {
            return super.ViewAccountInformation(message, metadata, options, callback);
        };
        UpdateAccountInformation: GrpcUnaryServiceInterface<UpdateAccountInformationRequest, UpdateAccountInformationResponse> = (message: UpdateAccountInformationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateAccountInformationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateAccountInformationResponse>, callback?: grpc_1.requestCallback<UpdateAccountInformationResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateAccountInformation(message, metadata, options, callback);
        };
    }
}
