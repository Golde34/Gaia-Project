type Query {
	# Authentication Service
	listAllUsers: [ListAllUsers]!
	getUserByUsername(input: UserInput!): User!
	getUserDetail(input: IdInput!): UpdateUser!

	getAllRoles: [Role]!
	getRoleByName(input: RoleInput!): Role!
	
	getAllPrivileges: [ListPrivilegeResponse]!
	getPrivilegeByName(input: PrivilegeInput!): Privilege!

	# Task Manager
	listAllProjects: [Project]!
	listAllProjectsByUserId(input: IdInput!): [Project]!
	getProjectById(input: IdInput!): Project! 
	
	getGroupTasksInProject(input: IdInput!): [GroupTask]!
	getGroupTaskById(input: IdInput!): GroupTask!

	getTasksByGroupTaskId(input: IdInput!): TaskDashboard!
	listAllTasks: [Task]!
	getTaskById(input: IdInput!): Task!	
	getTaskTableByGroupTaskId(input: IdInput!): TaskTable!

	getAllNotes(input: IdInput!): [Note]!

	getAllGithubRepos(input: IdInput!): [GithubRepo]!
	getProjectCommitList(input: IdInput!): [ProjectCommit]!
}

type Mutation {
	# Gaia Major Function
	registerTaskConfig(input:RegisterTaskInput!): RegisterTaskConfig!
	registerSchedulePlan(input:UserIdInput!): RegisterSchedulePlan!
	isTaskExisted(input:UserIdInput!): IsTaskExisted!
	isScheduleExisted(input:UserIdInput!): IsScheduleExisted!
	queryTaskConfig(input:UserIdInput!): IsTaskConfigExisted!

	# Authentication Service
	signin(input: SigninInput!): AuthTokenResponse!
	gaiaAutoSignin(input: SigninInput!): AuthTokenResponse!
	checkToken(input: TokenInput!): TokenResponse!
	checkPermission(input: UserPermissionInput!): UserPermissionResponse!
	
	createUser(input: CreateUserInput!): User!
	updateUser(input: UpdateUserInput!): UpdateUser!
	deleteUser(input: UserInput!): User!
	
	createRole(input: RoleInput!): Role!
	updateRole(input: RoleInput!): Role!
	deleteRole(input: RoleInput!): Role!
	
	createPrivilege(input: PrivilegeInput!): Privilege!
	updatePrivilege(input: PrivilegeInput!): Privilege!
	deletePrivilege(input: PrivilegeInput!): Privilege!

	updateUserSetting(input: UpdateUserSettingInput!): UserSetting!	
	# Task Manager
	createProject(input: CreateProjectInput!): Project!
	updateProject(input: UpdateProjectInput!): Project!
	deleteProject(input: IdInput!): Project!
	updateProjectName(input: UpdateObjectNameInput!): Project!
	updateProjectColor(input: UpdateColorInput!): Project!
	archiveProject(input: IdInput!): Project!
	enableProject(input: IdInput!): Project!

	createTask(input: CreateTaskInput!): Task!
	updateTask(input: UpdateTaskInput!): Task!
	deleteTask(input: IdInput!): Task!
	generateTaskWithoutGroupTask(input: GenerateTaskWithoutGroupTaskInput!): Task!
	updateTaskInDialog(input: UpdateTaskInDialogInput!): Task!
	moveTask(input: MoveTaskInput!): Task!
	archiveTask(input: IdInput!): Task!
	enable(input: IdInput!): Task!

	createGroupTask(input: CreateGroupTaskInput!): GroupTask!
	updateGroupTask(input: UpdateGroupTaskInput!): GroupTask!
	deleteGroupTask(input: IdInput!): GroupTask!
	updateGroupTaskName(input: UpdateObjectNameInput!): GroupTask!
	calculateCompletedTasks(input: IdInput!): GroupTask!
	updateOrdinalNumber(input: ProjectGroupTaskIdInput!): GroupTask!
	archieveGroupTask(input: IdInput!): GroupTask!
	enableGroupTask(input: IdInput!): GroupTask!

	createNote(input: CreateNoteInput!): Note!
	lockNote(input: LockNoteInput!): Note!
	unlockNote(input: UnlockNoteInput!): Note!
}

input IdInput {
  	id: String!
}

input UpdateObjectNameInput {
 	id: String!
  	name: String!
}

input UserPermissionInput {
  	userId: ID!
  	permissionId: String!
}

type UserPermissionResponse {
  	id: ID!
  	name: String!
}

input UserIdInput {
	userId: Float!
}