package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"middleware_loader/core/services"
	"middleware_loader/infrastructure/graph/model"
)

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, input model.SigninInput) (*model.AuthTokenResponse, error) {
	authToken, err := authService.Signin(ctx, input)
	return &authToken, err
}

// GaiaAutoSignin is the resolver for the gaiaAutoSignin field.
func (r *mutationResolver) GaiaAutoSignin(ctx context.Context, input model.SigninInput) (*model.AuthTokenResponse, error) {
	authToken, err := authService.GaiaAutoSignin(ctx, input)
	return &authToken, err
}

// CheckToken is the resolver for the checkToken field.
func (r *mutationResolver) CheckToken(ctx context.Context, input model.TokenInput) (*model.TokenResponse, error) {
	panic(fmt.Errorf("not implemented: CheckToken - checkToken"))
}

// CheckPermission is the resolver for the checkPermission field.
func (r *mutationResolver) CheckPermission(ctx context.Context, input model.UserPermissionInput) (*model.UserPermissionResponse, error) {
	panic(fmt.Errorf("not implemented: CheckPermission - checkPermission"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	task, err := taskService.CreateTask(ctx, input)
	return &task, err
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) Task(ctx context.Context) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: Task - task"))
}
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}
func (r *queryResolver) Project(ctx context.Context) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}
func (r *queryResolver) GroupTask(ctx context.Context) (*model.GroupTask, error) {
	panic(fmt.Errorf("not implemented: GroupTask - groupTask"))
}
func (r *queryResolver) GroupTasks(ctx context.Context) ([]*model.GroupTask, error) {
	panic(fmt.Errorf("not implemented: GroupTasks - groupTasks"))
}
func (r *queryResolver) SubTask(ctx context.Context) (*model.SubTask, error) {
	panic(fmt.Errorf("not implemented: SubTask - subTask"))
}
func (r *queryResolver) SubTasks(ctx context.Context) ([]*model.SubTask, error) {
	panic(fmt.Errorf("not implemented: SubTasks - subTasks"))
}
func (r *queryResolver) Comment(ctx context.Context) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

var authService = services.NewAuthService()
var taskService = services.NewTaskService()
